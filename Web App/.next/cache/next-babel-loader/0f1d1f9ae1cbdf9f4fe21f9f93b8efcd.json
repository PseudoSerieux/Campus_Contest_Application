{"ast":null,"code":"var _jsxFileName = \"/home/corentin/Documents/react/Campus_Contest_Application/Web App/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport LayoutBack from '../components/LayoutBack';\nimport Link from 'next/link';\nimport Header from '../components/Header';\nimport fetch from 'isomorphic-unfetch';\nimport Button from '@material-ui/core/Button';\n\nconst Index = props => __jsx(LayoutBack, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8\n  },\n  __self: this\n}, __jsx(Header, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9\n  },\n  __self: this\n}), __jsx(\"h1\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10\n  },\n  __self: this\n}, \"Batman TV Shows\"), __jsx(Button, {\n  variant: \"contained\",\n  color: \"primary\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}, \"Hello World\"), __jsx(\"ul\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14\n  },\n  __self: this\n}, props.shows.map(show => __jsx(\"li\", {\n  key: show.id,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16\n  },\n  __self: this\n}, __jsx(Link, {\n  href: \"/p/[id]\",\n  as: `/p/${show.id}`,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}, __jsx(\"a\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18\n  },\n  __self: this\n}, show.name))))));\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\n  const data = await res.json();\n  console.log(`Show data fetched. Count: ${data.length}`);\n  return {\n    shows: data.map(entry => entry.show)\n  };\n};\n\nexport default Index;","map":{"version":3,"sources":["/home/corentin/Documents/react/Campus_Contest_Application/Web App/pages/index.js"],"names":["LayoutBack","Link","Header","fetch","Button","Index","props","shows","map","show","id","name","getInitialProps","res","data","json","console","log","length","entry"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,0BAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;;AAEA,MAAMC,KAAK,GAAGC,KAAK,IACf,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFJ,EAGI,MAAC,MAAD;AAAQ,EAAA,OAAO,EAAC,WAAhB;AAA4B,EAAA,KAAK,EAAC,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHJ,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACKA,KAAK,CAACC,KAAN,CAAYC,GAAZ,CAAgBC,IAAI,IACjB;AAAI,EAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,MAAC,IAAD;AAAM,EAAA,IAAI,EAAC,SAAX;AAAqB,EAAA,EAAE,EAAG,MAAKD,IAAI,CAACC,EAAG,EAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAID,IAAI,CAACE,IAAT,CADJ,CADJ,CADH,CADL,CANJ,CADJ;;AAmBAN,KAAK,CAACO,eAAN,GAAwB,kBAAiB;AACrC,QAAMC,GAAG,GAAG,MAAMV,KAAK,CAAC,8CAAD,CAAvB;AACA,QAAMW,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAnB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAa,6BAA4BH,IAAI,CAACI,MAAO,EAArD;AAEA,SAAO;AACHX,IAAAA,KAAK,EAAEO,IAAI,CAACN,GAAL,CAASW,KAAK,IAAIA,KAAK,CAACV,IAAxB;AADJ,GAAP;AAGH,CATD;;AAWA,eAAeJ,KAAf","sourcesContent":["import LayoutBack from '../components/LayoutBack';\nimport Link from 'next/link';\nimport Header from '../components/Header';\nimport fetch from 'isomorphic-unfetch';\nimport Button from '@material-ui/core/Button';\n\nconst Index = props => (\n    <LayoutBack>\n        <Header />\n        <h1>Batman TV Shows</h1>\n        <Button variant=\"contained\" color=\"primary\">\n            Hello World\n        </Button>\n        <ul>\n            {props.shows.map(show => (\n                <li key={show.id}>\n                    <Link href=\"/p/[id]\" as={`/p/${show.id}`}>\n                        <a>{show.name}</a>\n                    </Link>\n                </li>\n            ))}\n        </ul>\n    </LayoutBack>\n);\n\nIndex.getInitialProps = async function() {\n    const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\n    const data = await res.json();\n\n    console.log(`Show data fetched. Count: ${data.length}`);\n\n    return {\n        shows: data.map(entry => entry.show)\n    };\n};\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}